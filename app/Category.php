<?php

namespace App;

use Illuminate\Database\Eloquent\Model;
//use Illuminate\Support\Str;

class Category extends Model
{
    public function parent()
    {
        /*Нам нужно получить название категорий по id.
        Это наша ф-ция связи которая поможет это сделать.*/

        return $this->belongsTo(self::class, 'parent_id');
        /*Мы хотим связать таблицу саму с собой. То есть при добавлении категории в колонке родительской категории выводить ее имя, для этого и пишем ф-цию.
        self::class - означает связь таблицы с собой.
        'parent_id' - во втором параметре указываем в какой колонке связь.

        Все выводы проичходят в categories/index.blade*/
    }

    public function children()
    {
    	return $this->hasMany(self::class, 'parent_id');
    }

    public function setSlugAttribute($value)
    /*Эта ф-ция сеттер(она относится к аксеторам). Она будет вызываться в момент сохранения данных которые приходят с формы(создания категорий), проверять их и транслетелировать.

    Чтоб все работало автоматом, мы обязанны называть ф-цию именно так где Slug это название столбца таблицы

    В $value будут попадать данные которые приходят из формы*/
    {
    	if(!$value) {
    		$this->attributes['slug'] = \Str::slug($this->attributes['name'], '-');
    	}
        /*Если в $value приходит ничего то есть пользователь ничего не ввел,
        тогда в массив attributes с ключем ['slug'] записуем то что находится в ['name'](в проверки валидации мы указывали что он обязательный к заполнению).

        Метод \Str::slug():
        В первом параметре говорит что мы будем преобразовывать.
        во втором говорит чем заменить пробелы

        Про этот метод можно прочитать на сайте laravel/deeping deeper/helpers*/
    	else {
    		$this->attributes['slug'] = \Str::slug($value, '-');
    	} /*если же все таки пользователь ввел что то то мы берем в первом параметре то что прийдет из формы.

        На сайте laravel/eloqument OLM/muttators можно прочитать как создавать эти ф-ции(свои мутаторы)*/



    	
    }
}
